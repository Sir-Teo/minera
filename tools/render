#!/bin/bash
# Minerva Rendering Wrapper Script
#
# Automatically renders images or videos from simulation output.
# Finds and uses ParaView's pvpython automatically.

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Find pvpython
find_pvpython() {
    # Check common locations
    local pvpython_paths=(
        "/Applications/ParaView-"*".app/Contents/bin/pvpython"
        "/usr/local/bin/pvpython"
        "$HOME/Applications/ParaView-"*".app/Contents/bin/pvpython"
    )

    for path in ${pvpython_paths[@]}; do
        if [ -f "$path" ]; then
            echo "$path"
            return 0
        fi
    done

    return 1
}

# Print usage
usage() {
    cat << EOF
Minerva Rendering Tool

Usage:
    ./tools/render images           Generate PNG images for all frames
    ./tools/render video            Generate video animation
    ./tools/render help             Show this help

Options:
    --output DIR                    Output directory (default: output/renders)
    --fps N                         Video framerate (default: 30)
    --size WxH                      Resolution (default: 1920x1080)

Examples:
    ./tools/render images
    ./tools/render video --fps 60
    ./tools/render images --output my_renders --size 3840x2160

Requirements:
    - ParaView must be installed (brew install --cask paraview)
    - Simulation must have been run (output/*.pvd files must exist)
EOF
}

# Main script
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

if [ $# -eq 0 ] || [ "$1" == "help" ] || [ "$1" == "--help" ]; then
    usage
    exit 0
fi

# Find pvpython
echo -e "${YELLOW}Finding ParaView...${NC}"
PVPYTHON=$(find_pvpython)

if [ -z "$PVPYTHON" ]; then
    echo -e "${RED}Error: pvpython not found!${NC}"
    echo ""
    echo "Please install ParaView:"
    echo "  brew install --cask paraview"
    echo ""
    echo "Or specify PVPYTHON environment variable:"
    echo "  export PVPYTHON=/path/to/pvpython"
    exit 1
fi

echo -e "${GREEN}Found: $PVPYTHON${NC}"

# Parse command
MODE="$1"
shift

if [ "$MODE" != "images" ] && [ "$MODE" != "video" ]; then
    echo -e "${RED}Error: Invalid mode '$MODE'${NC}"
    echo "Use 'images' or 'video'"
    exit 1
fi

# Build command
CMD=("$PVPYTHON" "$SCRIPT_DIR/render_paraview.py" "--$MODE")

# Pass through remaining arguments
CMD+=("$@")

# Execute
echo -e "${YELLOW}Running ParaView renderer...${NC}"
echo "Command: ${CMD[@]}"
echo ""

"${CMD[@]}"

# Success message
if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}âœ“ Rendering complete!${NC}"

    if [ "$MODE" == "video" ]; then
        echo ""
        echo -e "${YELLOW}Tip:${NC} Convert AVI to MP4 with:"
        echo "  ffmpeg -i output/rb_animation.avi -c:v libx264 output/rb_animation.mp4"
        echo "  ffmpeg -i output/md_animation.avi -c:v libx264 output/md_animation.mp4"
    fi
fi
